// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`transform > ./fixtures/alias.js 1`] = `
"// @ts-check
import { quansync as x } from 'quansync/macro'
import { expect } from 'vitest'

export const echo = x({
  sync: /** @param {string} v */ (v) => v,
  async: (v) => Promise.resolve(v),
})

const echoNewLine = x(
  /** @param {string|Promise<string>} v */ function* (v) {
    const contents = yield echo(yield v)
    return contents + '\\n'
  },
)

export default async () => {
  const iter = echoNewLine('hello')
  expect(iter).a('Generator')
  await expect(iter).resolves.toBe('hello\\n')
  expect(echoNewLine.sync('world')).toBe('world\\n')

  await expect(echoNewLine(Promise.resolve('hello'))).resolves.toBe('hello\\n')
  expect(() => echoNewLine.sync(Promise.resolve('world'))).throw()
}
"
`;

exports[`transform > ./fixtures/basic.js 1`] = `
"// @ts-check
import { quansync } from 'quansync/macro'
import { expect } from 'vitest'

export const getNumber = quansync({
  sync: /** @param {number} id */ (id) => id,
  async: (id) => Promise.resolve(id),
})

const inc1 = quansync(function* (){
  const value = yield getNumber(1)
  return value + 1
})

const inc2 = quansync(function* (id) {
  const value = yield getNumber(1)
  return value + 1
})

const inc3 = quansync(function* named(){
  const value = yield getNumber(1)
  return value + 1
})

const inc4 = quansync(function* named(id) {
  const value = yield getNumber(1)
  return value + 1
})

const inc5 = quansync(() => {
return function* () {
  const value = yield getNumber(1)
  return value + 1
}.call(this)
})

const inc6 = quansync((id) => {
return function* () {
  const value = yield getNumber(1)
  return value + 1
}.call(this)
})

export const fn7 = quansync(() => {
return function* () {
  yield 1
  yield 2
  const fn = async () => {
    await 3
  }
  async function x() {
    await 4
  }
  class Foo {
    async x() {
      await 10
    }
    async #x() {
      await 10
    }
  }
}.call(this)
})

quansync(() => {
return function* () {
  ;!(yield 1)
  ;'' + (yield 1)
  ;false && (yield 1)
  fn7()
  ;(yield 1) < (yield 10)
  const x = (yield 1) < (yield 10)
}.call(this)
})

export default async () => {
  await expect(getNumber(1)).resolves.toBe(1)
  expect(getNumber.sync(1)).toBe(1)
  for (const fn of [inc1, inc2, inc3, inc4, inc5, inc6]) {
    await expect(fn()).resolves.toBe(2)
    expect(fn.sync(1)).toBe(2)
  }
}
"
`;

exports[`transform > ./fixtures/inlined-arrow.js 1`] = `
"// @ts-check
import { quansync } from 'quansync/macro'
import { expect } from 'vitest'

export const echo = quansync({
  sync: /** @param {string} v */ (v) => v,
  async: (v) => Promise.resolve(v),
})

const echoNewLine = quansync(
  /** @param {string|Promise<string>} v */ (v) =>
    {
return function* () {
return ((yield echo(yield v))) + '\\n'
}.call(this)
},
)

export default async () => {
  const iter = echoNewLine('hello')
  expect(iter).a('Generator')
  await expect(iter).resolves.toBe('hello\\n')
  expect(echoNewLine.sync('world')).toBe('world\\n')

  await expect(echoNewLine(Promise.resolve('hello'))).resolves.toBe('hello\\n')
  expect(() => echoNewLine.sync(Promise.resolve('world'))).throw()
}
"
`;
